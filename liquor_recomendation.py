# -*- coding: utf-8 -*-
"""liquor_recomendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x4NvoCjsqzVzgYJ9kURjiY4ga0iE5VRZ
"""

#from numpy.core.fromnumeric import repeat
#import altair as alt

#import plotly.graph_objects as go
#import plotly.express as px

#from datetime import datetime

#load data
#df_agg = pd.read_csv('').iloc[1:,:] # that it means skip the first row and include every column
#df_agg_sub = pd.read_csv('').iloc[1:,:] # that it means skip the first row and include every column

#import libs
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from ast import literal_eval  # 문자열 파싱 라이브러리
from sklearn.feature_extraction.text import CountVectorizer

#load data
df_final = pd.read_csv("df_final.csv")

import streamlit as st
st.title("전통주 추천 시스템")
st.header("내 입맛에 맞는 전통주를 추천 받으세요! ")
st.write("이미 마셔본 전통주가 있다면 비슷한 제품으로 추천합니다!")

#define functions
def traditional_name(aaa) :
    a = dfk.loc[dfk['제품명'] == aaa,'index']
    a = int(a)
    
    df_for_cossim_T = dfc.transpose()

    item_sim = cosine_similarity(dfc, dfc)
    item_sim_df = pd.DataFrame(data=item_sim, index=df_for_cossim_T.columns, columns=df_for_cossim_T.columns)

    c0 = pd.DataFrame(item_sim_df[a].sort_values(ascending=False)[0:30])
    c0['index'] = c0.index
    c1 = pd.merge(c0, dfc, left_on = 'index', right_on= dfc.index, how = 'inner')

    count_vect = CountVectorizer(min_df=0, ngram_range=(1, 2))  
    # min_df: 단어장에 들어갈 최소빈도, ngram_range: 1 <= n <= 2

    dfk3 = pd.merge(c1, dfk2, on='index',how='inner')
    key_mat = count_vect.fit_transform(dfk3['keyword'])


    count_vect = CountVectorizer(min_df=1, ngram_range=(1, 3))  # min_df: 단어장에 들어갈 최소빈도, ngram_range: 1 <= n <= 2
    key_mat = count_vect.fit_transform(dfk3['keyword'])
    key_sim = cosine_similarity(key_mat, key_mat)

    # 대칭 행렬
    key_sim_sorted_ind = key_sim.argsort()[:, ::-1] # ::-1 : 역순으로 정렬

    title_sool = dfk3[dfk3['index'] == a]

    sool_index = title_sool.index.values

    similar_indexes = key_sim_sorted_ind[sool_index, :10]
    similar_indexes
    # 추출된 top_n index들 출력. top_n index는 2차원 데이터 임.
    # dataframe에서 index로 사용하기 위해서 2차원 array를 1차원 array로 변경
    similar_indexes = similar_indexes.reshape(-1)
   
    k1 = dfk3.iloc[similar_indexes]
    return k1[0:11]

#a = input("전통주 이름을 입력해주세요 : ")
#traditional_name(a)

def main(): 
  a = st.input("전통주 이름을 입력해주세요 : ")
  st.write(traditional_name(a))

if __name__ == '__main__':
    main()